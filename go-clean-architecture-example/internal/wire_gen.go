// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"encoding/json"
	"github.com/casbin/casbin/v2/persist/file-adapter"
	"github.com/gofiber/fiber/v2"
	cache2 "github.com/gofiber/fiber/v2/middleware/cache"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/etag"
	logger3 "github.com/gofiber/fiber/v2/middleware/logger"
	recover2 "github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/gofiber/fiber/v2/utils"
	"github.com/gofiber/swagger"
	"go-clean-architecture-example/config"
	"go-clean-architecture-example/docs"
	"go-clean-architecture-example/internal/api"
	"go-clean-architecture-example/internal/app"
	"go-clean-architecture-example/internal/common/errors"
	"go-clean-architecture-example/internal/common/logger"
	"go-clean-architecture-example/internal/infrastructure/cache"
	"go-clean-architecture-example/internal/infrastructure/notification"
	"go-clean-architecture-example/internal/infrastructure/persistence"
	"go-clean-architecture-example/internal/middleware/fibercasbin"
	"go-clean-architecture-example/internal/probes"
	"go-clean-architecture-example/internal/router"
	logger2 "go-clean-architecture-example/pkg/logger"
	"os"
	"time"
)

// Injectors from server.go:

func New() (*Server, error) {
	configuration, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	repository := persistence.NewCragMemRepository()
	loggerLogger := logger.NewLoggerAplication(configuration)
	service := notification.NewNotificationService(loggerLogger)
	application := app.NewApplication(repository, service, loggerLogger)
	cragHttpApi := api.NewCragHttpApi(application)
	cragRouter := router.NewCragRouter(cragHttpApi)
	healthCheckApplication := probes.NewHealthChecker(configuration)
	engine, err := cache.NewRedisCache(configuration)
	if err != nil {
		return nil, err
	}
	server := NewServer(configuration, cragRouter, healthCheckApplication, loggerLogger, engine)
	return server, nil
}

// server.go:

// Server struct
type Server struct {
	app    *fiber.App
	cfg    *config.Configuration
	logger logger2.Logger
}

// @title  My SERVER
// @version 1.0
// @description This is a sample swagger for Fiber
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.email minkj1992@gmail.com
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:5000
// @BasePath /
func NewServer(
	cfg *config.Configuration,
	cragRouter router.CragRouter,
	healthCheckApp probes.HealthCheckApplication, logger4 logger2.Logger,

	cacheEngine cache.Engine) *Server {
	app2 := fiber.New(fiber.Config{
		ErrorHandler: errors.CustomErrorHandler,
		ReadTimeout:  time.Second * cfg.Server.ReadTimeout,
		WriteTimeout: time.Second * cfg.Server.WriteTimeout,
		JSONDecoder:  json.Unmarshal,
		JSONEncoder:  json.Marshal,
	})
	app2.
		Use(cors.New())
	app2.
		Use(etag.New())
	app2.
		Use(recover2.New())
	app2.
		Use(logger3.New(logger3.Config{
			Next:         nil,
			Done:         nil,
			Format:       "[${time}] ${status} - ${latency} ${method} ${path}\n",
			TimeFormat:   "15:04:05",
			TimeZone:     "Local",
			TimeInterval: 500 * time.Millisecond,
			Output:       os.Stdout,
		}))
	app2.
		Use(cache2.New(cache2.Config{
			Next: func(c *fiber.Ctx) bool {
				if c.Query("refresh") == "true" {
					go cacheEngine.Delete(utils.CopyString(c.Path()) + "_" + c.Method())
					go cacheEngine.Delete(utils.CopyString(c.Path()) + "_" + c.Method() + "_body")
					return true
				}
				return false
			},
			KeyGenerator: func(c *fiber.Ctx) string {
				return utils.CopyString(c.Path())
			},
			Expiration:   1 * time.Minute,
			CacheControl: true,
			Methods:      []string{fiber.MethodGet},
			Storage:      cacheEngine,
		}))

	setSwagger(cfg.Server.BaseURI)
	app2.
		Get("/swagger/*", swagger.HandlerDefault)
	app2.
		Get("/liveliness", func(c *fiber.Ctx) error {
			result := healthCheckApp.LiveEndpoint()
			if result.Status {
				return c.Status(fiber.StatusOK).JSON(result)
			}
			return c.Status(fiber.StatusServiceUnavailable).JSON(result)
		})
	app2.
		Get("/readiness", func(c *fiber.Ctx) error {
			result := healthCheckApp.ReadyEndpoint()
			if result.Status {
				return c.Status(fiber.StatusOK).JSON(result)
			}
			return c.Status(fiber.StatusServiceUnavailable).JSON(result)
		})

	authz := fibercasbin.NewFiberCasbin(fibercasbin.Config{
		ModelFilePath: cfg.Authorization.CasbinModelFilePath,
		Secret:        cfg.Authorization.JWTSecret,
		PolicyAdapter: fileadapter.NewAdapter(cfg.Authorization.CasbinPolicyFilePath),
	})
	api2 := app2.Group("/api")
	v1 := api2.Group("/v1")
	cragRouter.Init(&v1, authz)

	return &Server{
		cfg:    cfg,
		logger: logger4,
		app:    app2,
	}
}

func (serv Server) App() *fiber.App {
	return serv.app
}

func (serv Server) Config() *config.Configuration {
	return serv.cfg
}

func (serv Server) Logger() logger2.Logger {
	return serv.logger
}

func setSwagger(baseURI string) {
	docs.SwaggerInfo.
		Title = "Go Clean Architecture Example ✈️"
	docs.SwaggerInfo.
		Description = "This is a go clean architecture example."
	docs.SwaggerInfo.
		Version = "1.0"
	docs.SwaggerInfo.
		Host = baseURI
	docs.SwaggerInfo.
		BasePath = "/api/v1"
}
