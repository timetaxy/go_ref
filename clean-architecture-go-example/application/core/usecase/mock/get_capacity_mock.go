// Code generated by MockGen. DO NOT EDIT.
// Source: get_capacity.go

// Package mock is a generated GoMock package.
package mock

import (
	entity "github.com/basilhe/tdd/application/core/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIGetAvailablePortsOfAllDevicesInExchange is a mock of IGetAvailablePortsOfAllDevicesInExchange interface
type MockIGetAvailablePortsOfAllDevicesInExchange struct {
	ctrl     *gomock.Controller
	recorder *MockIGetAvailablePortsOfAllDevicesInExchangeMockRecorder
}

// MockIGetAvailablePortsOfAllDevicesInExchangeMockRecorder is the mock recorder for MockIGetAvailablePortsOfAllDevicesInExchange
type MockIGetAvailablePortsOfAllDevicesInExchangeMockRecorder struct {
	mock *MockIGetAvailablePortsOfAllDevicesInExchange
}

// NewMockIGetAvailablePortsOfAllDevicesInExchange creates a new mock instance
func NewMockIGetAvailablePortsOfAllDevicesInExchange(ctrl *gomock.Controller) *MockIGetAvailablePortsOfAllDevicesInExchange {
	mock := &MockIGetAvailablePortsOfAllDevicesInExchange{ctrl: ctrl}
	mock.recorder = &MockIGetAvailablePortsOfAllDevicesInExchangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIGetAvailablePortsOfAllDevicesInExchange) EXPECT() *MockIGetAvailablePortsOfAllDevicesInExchangeMockRecorder {
	return m.recorder
}

// GetAvailablePortsOfAllDevicesInExchange mocks base method
func (m *MockIGetAvailablePortsOfAllDevicesInExchange) GetAvailablePortsOfAllDevicesInExchange(exchange string) ([]*entity.BroadbandAccessDevice, error) {
	ret := m.ctrl.Call(m, "GetAvailablePortsOfAllDevicesInExchange", exchange)
	ret0, _ := ret[0].([]*entity.BroadbandAccessDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailablePortsOfAllDevicesInExchange indicates an expected call of GetAvailablePortsOfAllDevicesInExchange
func (mr *MockIGetAvailablePortsOfAllDevicesInExchangeMockRecorder) GetAvailablePortsOfAllDevicesInExchange(exchange interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailablePortsOfAllDevicesInExchange", reflect.TypeOf((*MockIGetAvailablePortsOfAllDevicesInExchange)(nil).GetAvailablePortsOfAllDevicesInExchange), exchange)
}

// MockIDoesExchangeExist is a mock of IDoesExchangeExist interface
type MockIDoesExchangeExist struct {
	ctrl     *gomock.Controller
	recorder *MockIDoesExchangeExistMockRecorder
}

// MockIDoesExchangeExistMockRecorder is the mock recorder for MockIDoesExchangeExist
type MockIDoesExchangeExistMockRecorder struct {
	mock *MockIDoesExchangeExist
}

// NewMockIDoesExchangeExist creates a new mock instance
func NewMockIDoesExchangeExist(ctrl *gomock.Controller) *MockIDoesExchangeExist {
	mock := &MockIDoesExchangeExist{ctrl: ctrl}
	mock.recorder = &MockIDoesExchangeExistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDoesExchangeExist) EXPECT() *MockIDoesExchangeExistMockRecorder {
	return m.recorder
}

// DoesExchangeExist mocks base method
func (m *MockIDoesExchangeExist) DoesExchangeExist(exchange string) bool {
	ret := m.ctrl.Call(m, "DoesExchangeExist", exchange)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DoesExchangeExist indicates an expected call of DoesExchangeExist
func (mr *MockIDoesExchangeExistMockRecorder) DoesExchangeExist(exchange interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesExchangeExist", reflect.TypeOf((*MockIDoesExchangeExist)(nil).DoesExchangeExist), exchange)
}

// MockIGetCapacityForExchangeUseCase is a mock of IGetCapacityForExchangeUseCase interface
type MockIGetCapacityForExchangeUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIGetCapacityForExchangeUseCaseMockRecorder
}

// MockIGetCapacityForExchangeUseCaseMockRecorder is the mock recorder for MockIGetCapacityForExchangeUseCase
type MockIGetCapacityForExchangeUseCaseMockRecorder struct {
	mock *MockIGetCapacityForExchangeUseCase
}

// NewMockIGetCapacityForExchangeUseCase creates a new mock instance
func NewMockIGetCapacityForExchangeUseCase(ctrl *gomock.Controller) *MockIGetCapacityForExchangeUseCase {
	mock := &MockIGetCapacityForExchangeUseCase{ctrl: ctrl}
	mock.recorder = &MockIGetCapacityForExchangeUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIGetCapacityForExchangeUseCase) EXPECT() *MockIGetCapacityForExchangeUseCaseMockRecorder {
	return m.recorder
}

// GetCapacity mocks base method
func (m *MockIGetCapacityForExchangeUseCase) GetCapacity(exchange string) (*entity.Capacity, error) {
	ret := m.ctrl.Call(m, "GetCapacity", exchange)
	ret0, _ := ret[0].(*entity.Capacity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapacity indicates an expected call of GetCapacity
func (mr *MockIGetCapacityForExchangeUseCaseMockRecorder) GetCapacity(exchange interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapacity", reflect.TypeOf((*MockIGetCapacityForExchangeUseCase)(nil).GetCapacity), exchange)
}
